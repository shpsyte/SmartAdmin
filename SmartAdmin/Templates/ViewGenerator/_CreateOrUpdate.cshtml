@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@@model @Model.ViewDataTypeName


@{
   @:@@{ Layout = null; }


foreach (var property in Model.ModelMetadata.Properties)
{
if (property.IsPrimaryKey)
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "BusinessEntityId")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "CreateDate")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "ModifiedDate")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "rowguid")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "UserId")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
if (property.PropertyName == "Deleted")
{
    @:@@Html.HiddenFor(a => a.@property.PropertyName)
}
}



@:<fieldset>
     foreach (var property in Model.ModelMetadata.Properties)
    {
        if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly)
        {
            if (
                  (property.PropertyName == "BusinessEntityId") ||
                  (property.PropertyName == "CreateDate") ||
                  (property.PropertyName == "ModifiedDate") ||
                  (property.PropertyName == "rowguid") ||
                  (property.PropertyName == "UserId") ||
                  (property.PropertyName == "Deleted")
                )
            {
                continue;
            }
           

            if (property.IsForeignKey)
            {
        @:<div class="form-group">
            @:<div class="col-sm-12 col-md-6">
                @:<label asp-for="@property.PropertyName"></label>
                  @:<select asp-for="@property.PropertyName" class ="form-control" asp-items="ViewBag.@property.PropertyName"></select>
                  @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
        @:</div>
                continue;
            }

            bool isCheckbox = property.TypeName.Equals("System.Boolean");
            if (isCheckbox)
            {
        @:<div class="form-group">
            @:<div class="col-sm-12 col-md-6">
                @:<div class="checkbox">
                @:<label>
                    @:<input asp-for="@property.PropertyName" type="checkbox" class="checkbox style-0"  />
                    @:<span><label asp-for="@property.PropertyName"></label></span>
                @:</label>
                @:</div>
            @:</div>
        @:</div>
            }
            else if (property.IsEnum && !property.IsEnumFlags)
            {
        @:<div class="form-group">
            @:<div class="col-sm-12 col-md-6">
                @:<label asp-for="@property.PropertyName"></label>
                @:<select asp-for="@property.PropertyName" class="form-control"></select>
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
        @:</div>
            }
            else
            {
        @:<div class="form-group">
            @:<div class="col-sm-12 col-md-6">
                @:<label asp-for="@property.PropertyName"></label>
                @:<input asp-for="@property.PropertyName" placeholder="@@Localizer["@property.PropertyName"]" class="form-control" />
                @:<span asp-validation-for="@property.PropertyName" class="text-danger"></span>
            @:</div>
        @:</div>
            }
        }
    }
    
@:</fieldset>



}
@functions
{
    // Do we need to use this in conjunction with the PrimaryKey check?
    bool IsPropertyGuid(PropertyMetadata property)
    {
        return string.Equals("System.Guid", property.TypeName, StringComparison.OrdinalIgnoreCase);
    }
}